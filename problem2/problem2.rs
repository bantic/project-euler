/*
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms
 */

struct FibNumbers { current: int, previous: int }

impl FibNumbers {
    fn new() -> FibNumbers {
        FibNumbers {current: 0, previous: 0 }
    }
}

impl Iterator<int> for FibNumbers {
    fn next(&mut self) -> Option<int> {
        match self.current {
            0 => {
                self.previous = 0;
                self.current  = 1;
            },
            _ => {
                let prev      = self.previous;
                self.previous = self.current;
                self.current  = self.current + prev;
            }
        }

        Some(self.current)
    }
}

fn main() {
    let mut fib = FibNumbers::new();
    let max = 4000000;
    let mut sum = 0;

    for i in fib {
        match i%2 {
            0 => { sum = sum + i; },
            _ => {}
        }
        if i > max { break; }
    }
    println!("Sum {}",sum);
}
